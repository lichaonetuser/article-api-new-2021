# coding=utf-8
"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

import os
import urllib

from pymongo import ReadPreference

from api.log import exception_logger
from pyutil.text.multilingual import MultilingualTextManager
from api.utils.pool_manager import RedisPoolManager, MySQLPoolManager, KafkaProducerPoolManager
from pyutil.program.conf import Conf
from pyutil.program.conf_switch import switch, get_env
from api.utils.pseudonym import PseudonymGen
from api.interest.dals import ITagTable
from mongoengine import connect

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'ab7%6kqc$mu!7vx!+h@y^8a*x4jf4ft%1hm$!1s^yumiphvzgp'

DEBUG = True
ALLOWED_HOSTS = ['*']

# SECURITY WARNING: don't run with debug turned on in production!



ENV_KEY = 'ARTICLE_ENV'

# 环境切换
env_var = get_env(env_key=ENV_KEY)

if env_var not in {'online'}:
    env_var = 'test'

#DEBUG = True if env_var != 'online' else False

conf_path = switch('../conf/api.conf', env_key=ENV_KEY)
conf = Conf(conf_path)


# -------- original settings --------- #
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_AGE = 10 * 365 * 24 * 3600

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': conf.old_api_default_db_name,
        'USER': conf.old_api_default_db_user,
        'PASSWORD': conf.old_api_default_db_passwd,
        'HOST': conf.old_api_default_db_host,
        'PORT': conf.old_api_default_db_port
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# Redis pool
redis_pool = RedisPoolManager.load_from_yaml('../conf/{}/article_redis.yaml'.format(env_var))

# Mysql pool
mysql_pool = MySQLPoolManager.load_from_yaml('../conf/{}/article_mysql.yaml'.format(env_var))


# 多语言
multilingual_manager = MultilingualTextManager.load_from_yaml('../conf/api.multilingual.yaml')

# 假名生成器
pseudonym_gen = PseudonymGen.load_from_yaml('../conf/pseudonym.yaml')

# 一级分类,二级分类->tag
itag_table = ITagTable('../conf/itags.yaml', redis_pool['article_itag'])

# web host
ARTICLE_WEB_HOST = conf.article_web_host
ARTICLE_WEB_HOST_ENCODE = urllib.parse.quote(conf.article_web_host, safe='')

DOKI_LOGIN_HOSTS = conf.doki_login_hosts

Server_URL_PATH = conf.serverurlpath

# kafka producer pool
try:
    var = env_var
    kafka_producer_pool = KafkaProducerPoolManager.load_from_yaml('../conf/{}/article_kafka.yaml'.format(env_var))
except:
    kafka_producer_pool = None
    exception_logger.exception('kafka init error')


connect(
    alias=conf.social_mongodb_alias,
    host=conf.social_mongodb_host,
    replicaSet=conf.social_mongodb_replicaset,
    connect=False,
    read_preference=ReadPreference.NEAREST
)
